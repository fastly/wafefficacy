name: Build and Release

on:
  pull_request:
    branches: main
  push:
    branches: main
    tags:
      - v*
  workflow_dispatch:
  release:
    types: [published]


# Automatically cancel any previous workflow on new push.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true


jobs:
  build:
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, freebsd, openbsd, linux, dragonfly, darwin]
        goarch: [amd64, 386]
        exclude:
          # Exclude i386 on darwin and dragonfly
          # because they are not supported by go.
          - goarch: 386
            goos: dragonfly
          - goarch: 386
            goos: darwin
        include:
          # BEIGIN MacOS ARM64
          - goos: darwin
            goarch: arm64
          # END MacOS ARM64
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7
          # BEGIN Android ARM 8
          - goos: android
            goarch: arm64
          # END Android ARM 8
          # Windows ARM 7
          - goos: windows
            goarch: arm
            goarm: 7
          # BEGIN Other architectures
          # BEGIN riscv64 & ARM64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          # END riscv64 & ARM64
          # BEGIN MIPS
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mipsle
            gomips: -softfloat
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: mips
            gomips: -softfloat
          # END MIPS
          # BEGIN PPC
          - goos: linux
            goarch: ppc64
          - goos: linux
            goarch: ppc64le
          # END PPC
          # BEGIN FreeBSD ARM
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
          # END FreeBSD ARM
          # BEGIN S390X
          - goos: linux
            goarch: s390x
          # END S390X
          # END Other architectures
          # BEGIN OPENBSD ARM
          - goos: openbsd
            goarch: arm64
          - goos: openbsd
            goarch: arm
            goarm: 7
          # END OPENBSD ARM
      fail-fast: false

    runs-on: ubuntu-latest
    permissions: write-all
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Show workflow information 
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.18'
          cache: false

      - name: Build wafefficacy (any)
        if: matrix.gomips != '-softfloat'
        run: go build -o wafefficacy-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}
    
      - name: Build wafefficacy (mips softfloat)
        if: matrix.gomips == '-softfloat'
        run: GOMIPS=softfloat go build -o wafefficacy-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.gomips }}

      - name: Rename Windows
        if: matrix.goos == 'windows'
        run: mv wafefficacy-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }} wafefficacy-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}.exe

      - name: Build release zip
        run: |
          mkdir wafefficacy-release/
          mv -v ./wafefficacy-${{ matrix.goos }}-* wafefficacy-release/wafefficacy
          cp -v LICENSE *.md run.sh score.py  wafefficacy-release/
          cp -vr nuclei/ wafefficacy-release/nuclei/
          zip -r wafefficacy-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}${{ matrix.gomips }}.zip wafefficacy-release/

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wafefficacy-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goarm }}${{ matrix.gomips }}
          path: ./wafefficacy-*.zip

      - name: Release builds on tag
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./wafefficacy-*.zip